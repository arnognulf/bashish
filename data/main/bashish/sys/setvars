#!/bin/bash
##################################################################################
## Bashish, a console theme engine
## Copyright (C) 2010 Thomas Eriksson
##
## This program is free software; you can redistribute it and/or
## modify it under the terms of the GNU General Public License
## as published by the Free Software Foundation; either version 2
## of the License, or (at your option) any later version.
##
## This program is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
## 
## You should have received a copy of the GNU General Public License
## along with this program; if not, write to the Free Software
## Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
##################################################################################
##
## bashish provides mechanisms for changing themes.
## it is loaded by the bashish command
##
###############################################################################

checkcolor()
{
	test "x${UNSET}" != x && return 0
	local COLOR="$1"
	case "${COLOR}" in
	"#"[0-9a-f][0-9a-f][0-9a-f][0-9a-f][0-9a-f][0-9a-f]) return 0;;
	esac
	errorhandler 1 "colors must be specified a hash-sign followed by 6 hexadecimals, two hex for red, green and blue: eg \033[1m#\033[31mca\033[32mfe\033[34m32\033[0m\033[0m"
}

checkfnname()
{
	test "x${UNSET}" != x && return 0

	local FONT FONTNAME="$1" IFS="
"
	for FONT in $(fc-list | cut -d: -f1)
	do
		test "x$FONT" = "x$FONTNAME" && return 0
	done
	echo " "
	
	echo "$BASHISHNAME invalid font specified, press [ENTER] list fonts or CTRL+C to exit"
	read
	for FONT in $(fc-list | cut -d: -f1)
	do
		echo "${FONT}"
	done|less
	errorhandler 1 "invalid font specified"
}

parseopts ()
{
	test "x${UNSET}" != x && return 0

	case "${CMD}" in
	*fg|*fgcolor)	checkcolor "${ARG}" ; FGCOLOR="${ARG}";;
	*bg|*bgcolor)	checkcolor "${ARG}" ; 	BGCOLOR="${ARG}";;
	*fn|*fontname)	checkfnname "${ARG}"; FONTNAME="${ARG}";;
	*fs|*fontsize)	FONTSIZE="${ARG}";;
	*tr|*transparency) BGTRANSPARENCY="${ARG}";;
	*sh|*shade)	BGSHADE="${ARG}";;
	*fn|*fontname)	FONTNAME="${ARG}";;
	*xf|*xfont)	XFONT="${ARG}";;
	*lf|*lfont)	LFONT="${ARG}";;
	*bd|*bold)	checkcolor "${ARG}" ; 	BOLDCOLOR="${ARG}";;
	*)	errorhandler 1 "no such variable implemented";;
	esac
}

writeconf ()
{
	local FN_NAME="$1" FILE="$2" BGCOLOR FGCOLOR FONTNAME FONTSIZE BGTRANSPARENCY BGSHADE XFONT LFONT BOLDCOLOR
	eval "_bashish_theme_user${FN_NAME} () { :;}"
	test -f "${FILE}" && . "${FILE}"
	eval _bashish_theme_user${FN_NAME}
	
	parseopts
		
	printf "#!/bin/bash\n## this file is automaticly re-generated by bashish\n## modifications will be overwritten\n_bashish_theme_user${FN_NAME} () {\n\t:\n" >"${FILE}"
	for VAR in BGCOLOR FGCOLOR FONTNAME FONTSIZE BGTRANSPARENCY BGSHADE XFONT LFONT BOLDCOLOR 
	do
		eval test "\"x\${$VAR}\"" "!=" x && eval "printf \"\\\\t${VAR}=\\\"\${$VAR}\\\"\\\\n\"" >>"${FILE}"
	done
	printf "\n}\n" >>"${FILE}"
}

DEFAULTSFILE="${HOME}/.bashish/defaults/theme.user"
OVERRIDESFILE="${HOME}/.bashish/overrides/theme.user"
if test "x$DEFAULT" = x1
then
	writeconf defaults "${DEFAULTSFILE}"
else
	writeconf overrides "${OVERRIDESFILE}"

fi
