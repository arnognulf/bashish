#!/bin/sh
##################################################################################
## Bashish, a console theme engine
## Copyright (C) 2005 Thomas Eriksson
##
## This program is free software; you can redistribute it and/or
## modify it under the terms of the GNU General Public License
## as published by the Free Software Foundation; either version 2
## of the License, or (at your option) any later version.
##
## This program is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
## 
## You should have received a copy of the GNU General Public License
## along with this program; if not, write to the Free Software
## Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
########################################################
##
## This is the prompt loader for bashish
##
########################################################
##
## NOTE! Incomplete, buggy and non-POSIX shells may parse
## this file, so no ksh-specific code will be accepted in here
##
######################################################################

## write the shell PID so "bashishtheme" can force a theme update by
## sending a WINCH, which subsequently makes promptupdate to run
test "x${TTY}" = x && TTY=$(tty 2>/dev/null)
test "x${HOSTNAME}" = x && HOSTNAME=$(hostname)

test -d "$HOME/.bashish/tmp/${TTY##*/}" || mkdir -p "$HOME/.bashish/tmp/${TTY##*/}"
if test -d "$HOME/.bashish/tmp/${TTY##*/}"
then
	printf "$$" >"$HOME"/.bashish/tmp/"${TTY##*/}"/shpid$$
	test -f "$HOME/.bashish/tmp/${TTY##*/}/sync" && rm "$HOME/.bashish/tmp/${TTY##*/}/sync"
fi
## restore terminal on best effort
_bashish_restore()
{
	PS2='> '
	PS3='#? '
	PS4='+ '
	unset BASHISH_ASCIILOGO
	## load the fallback prompt to memory
	case "$SHELLNAME" in
	bash)
		PS1='\s-\v\$ '
		unset PROMPT_COMMAND
	;;
	zsh)
		PS1='%m%# '
		PS2='%_> '
		PS3='?# '
		PS4='+%N:%i> '
		unset RPS1 RPS2
		## zsh warns if functions does not exists
		unset -f precmd preexec 2>/dev/null
	;;
	*)
		case '$UID' in
		0) PS1='# ';;
		*) PS1='$ ';;
		esac
	esac
}

## load the fallback prompt to memory
_bashish_promptupdate ()
{
	## self destruct if no .bashish is found (otherwise bashish would install after an uninstall)
	if test -d "${HOME}/.bashish"
	then
		:
	else
		_bashish_restore
		unset -f cd
		unset -f _bashish_promptupdate _bashish_winch_promptupdate
		return 0
	fi
	
	## temporarily disable CTRL+C
	test "x$ZSH_NAME$BASH" != x && trap "" INT
	
	## zsh need this
	test x"$ZSH_NAME" != x && setopt prompt_subst
	
	## check if the theme is unsynced with the latest theme in 
	## bashishtheme, if so, force a theme update
	test -f "$HOME/.bashish/tmp/${TTY##*/}/sync" || {
		unset BASHISH_ASCIILOGO

		## dummy fallback prompt
		_bashish_defaults() { :;}
		_bashish_overrides() { :;}
		_bashish_prompt() { :;}

		## reset scrolling region
		printf "\033[H\033[2J\033[0;0r"
		bashish --init
		hash -r
	
		## load the fallback prompt to memory
		if test -f "$HOME/.bashish/defaults/prompt.$SHELLNAME"
		then
			. "$HOME/.bashish/defaults/prompt.$SHELLNAME"
		else
			if test -f "$HOME/.bashish/defaults/prompt.ksh"
			then
				. "$HOME/.bashish/defaults/prompt.ksh"
			else
				test -f "$HOME/.bashish/defaults/prompt.sh" && . "$HOME/.bashish/defaults/prompt.sh"
			fi
		fi
	
		test -f "$HOME/.bashish/defaults/prompt.$SHELLNAME" && . "$HOME/.bashish/defaults/prompt.$SHELLNAME"
		
		## continue loading if prompt is loaded cleanly
		## if not available, try to use 
		if test -f "$HOME/.bashish/prompt/prompt.$SHELLNAME"
		then
			. "$HOME/.bashish/prompt/prompt.$SHELLNAME"
		else
			if test -f "$HOME/.bashish/prompt/prompt.ksh"
			then
				. "$HOME/.bashish/prompt/prompt.ksh"
			else
				test -f "$HOME/.bashish/prompt/prompt.sh" && . "$HOME/.bashish/prompt/prompt.sh"
			fi
		fi
		
		## prompt overrides
		if test -f "$HOME/.bashish/overrides/prompt.$SHELLNAME"
		then
			. "$HOME/.bashish/overrides/prompt.$SHELLNAME"
		else
			if test -f "$HOME/.bashish/overrides/prompt.ksh"
			then
				. "$HOME/.bashish/overrides/prompt.ksh"
			else
				test -f "$HOME/.bashish/overrides/prompt.sh" && . "$HOME/.bashish/overrides/prompt.sh"
			fi
		fi
		
		## load argv.sh function
		_bashish_prompt_argv() { :;}
		test -f "$HOME/.bashish/prompt/argv.sh" && . "$HOME/.bashish/prompt/argv.sh"

		## a small delay makes the term settle down before reloading the prompt
		sleep 0.5
		

	}
	
	## restore prompt
	_bashish_restore

	## load defaults
	_bashish_defaults

	## load the bashish prompt
	eval _bashish_prompt $(_bashish_prompt_argv)

	## load overrides
	_bashish_overrides
	
	## load _bashish_title() if available
	_bashish_title
	
	## re-enable CTRL+C
	test "x$ZSH_NAME$BASH" != x && trap INT
}

## winch promptupdate
_bashish_winch_promptupdate()
{
	_bashish_promptupdate
	if test "x$BASH" != x
	then
		:
		$PROMPT_COMMAND
	else
		type precmd >/dev/null && precmd
	fi

}

## re-paint on winch signals
if test "x$BASH" != x
then
	trap "PROMPT_COMMAND=\"unset PROMPT_COMMAND;_bashish_promptupdate\"" WINCH
elif test "x$ZSH_NAME" != x
then
	trap "eval \"precmd () { unset -f precmd; _bashish_promptupdate;}\"" WINCH
fi

## re-paint whenever changing directory
case "$SHELLNAME" in
ksh)
cd ()
{
	unset -f cd
	cd "$@"
	_bashish_promptupdate
	cd ()
	{
		unset -f cd
		cd "$@"
		_bashish_promptupdate
	}
}
;;
bash|zsh)
cd ()
{
	builtin cd "$@"
	_bashish_promptupdate
}
;;
sh)
## sh does not support 'builtin'
cd ()
{
	chdir ${1+"$@"}
	_bashish_promptupdate
}

## posh does not support 'chdir'
type type 1>/dev/null 2>/dev/null || cd ()
{
	builtin cd "$@"
	_bashish_promptupdate
}

esac


## load prompt
_bashish_promptupdate

